name: Build and Publish Docker Image

on:
  workflow_run:
    workflows: ["Build & Test"]
    types:
      - completed
    branches: [master, dev]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Debug workflow trigger
        run: |
          echo "Workflow triggered by: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Event: ${{ github.event.workflow_run.event }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Repository: ${{ github.repository }}"
      
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            console.log("Available artifacts:", allArtifacts.data.artifacts.map(a => a.name));
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "build-files"
            })[0];
            
            if (!matchArtifact) {
              throw new Error("No build-files artifact found");
            }
            
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build-files.zip`, Buffer.from(download.data));

      - name: Extract build artifacts
        run: |
          unzip build-files.zip
          echo "Contents after unzip:"
          ls -la
          echo "Looking for HTML files:"
          find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -10

      - name: Prepare build directory structure
        run: |
          # The artifacts should contain the build files directly
          # Let's organize them properly for the Dockerfile
          if [ -f "index.html" ]; then
            echo "Build files are in root, creating build directory"
            mkdir -p build
            mv *.* build/ 2>/dev/null || true
            mv static build/ 2>/dev/null || true
          else
            echo "Build files structure:"
            ls -la
          fi

      - name: Create Dockerfile
        run: |
          cat > Dockerfile.runtime << 'EOF'
          FROM nginx:alpine
          
          # Copy the React build files to nginx html directory
          COPY build/ /usr/share/nginx/html/
          
          # Copy custom nginx configuration
          COPY nginx.conf /etc/nginx/nginx.conf
          
          # Expose port 80
          EXPOSE 80
          
          # Start nginx
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Create nginx configuration
        run: |
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
              
              server {
                  listen 80;
                  server_name localhost;
                  root /usr/share/nginx/html;
                  index index.html;
                  
                  # Handle client-side routing
                  location / {
                      try_files $uri $uri/ /index.html;
                  }
                  
                  # Cache static assets
                  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }
                  
                  # Security headers
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
              }
          }
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.runtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate image summary
        run: |
          echo "## Docker Image Published 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
