name: "Performance Analysis & Lighthouse"

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: CI=false npm run build
      env:
        REACT_APP_USER_POOL_ID: ${{ secrets.REACT_APP_USER_POOL_ID }}
        REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}

    - name: Analyze bundle size
      run: |
        # Create a more robust bundle analyzer script
        cat > analyze-bundle.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');

        function getFileSize(filePath) {
          try {
            const stats = fs.statSync(filePath);
            return stats.size;
          } catch (error) {
            console.warn(`Could not get size for ${filePath}:`, error.message);
            return 0;
          }
        }

        function getGzippedSize(filePath) {
          try {
            // Use system gzip command for accurate gzipped size
            const command = process.platform === 'win32' 
              ? `powershell -c "(Get-Content '${filePath}' -Raw | gzip).Length"`
              : `gzip -c "${filePath}" | wc -c`;
            const result = execSync(command, { encoding: 'utf8' });
            return parseInt(result.trim()) || 0;
          } catch (error) {
            // Fallback to Node.js zlib if system gzip fails
            try {
              const zlib = require('zlib');
              const content = fs.readFileSync(filePath);
              return zlib.gzipSync(content).length;
            } catch (zlibError) {
              console.warn(`Could not get gzipped size for ${filePath}:`, error.message);
              return 0;
            }
          }
        }

        function formatBytes(bytes) {
          return (bytes / 1024).toFixed(1) + ' KB';
        }

        function analyzeFiles(dir, extension, type) {
          if (!fs.existsSync(dir)) {
            console.log(`Directory ${dir} does not exist, skipping ${type} analysis`);
            return { files: [], total: 0, totalGzipped: 0 };
          }
          
          const files = fs.readdirSync(dir)
            .filter(file => file.endsWith(extension))
            .map(file => {
              const filePath = path.join(dir, file);
              const size = getFileSize(filePath);
              const gzippedSize = getGzippedSize(filePath);
              
              return {
                name: file,
                size: size,
                gzippedSize: gzippedSize,
                sizeFormatted: formatBytes(size),
                gzippedSizeFormatted: formatBytes(gzippedSize)
              };
            })
            .sort((a, b) => b.size - a.size);

          const total = files.reduce((sum, file) => sum + file.size, 0);
          const totalGzipped = files.reduce((sum, file) => sum + file.gzippedSize, 0);

          return { files, total, totalGzipped };
        }

        function generateReport() {
          console.log('Starting bundle analysis...');
          
          const buildDir = './build';
          const jsDir = path.join(buildDir, 'static', 'js');
          const cssDir = path.join(buildDir, 'static', 'css');

          if (!fs.existsSync(buildDir)) {
            console.error('Build directory not found. Please run npm run build first.');
            process.exit(1);
          }

          const jsAnalysis = analyzeFiles(jsDir, '.js', 'JavaScript');
          const cssAnalysis = analyzeFiles(cssDir, '.css', 'CSS');

          let report = '## Bundle Size Analysis Report 📊\n\n';
          
          // JavaScript files
          if (jsAnalysis.files.length > 0) {
            report += '### JavaScript Files\n';
            report += '| File | Size | Gzipped |\n';
            report += '|------|------|---------|\n';
            jsAnalysis.files.forEach(file => {
              report += `| ${file.name} | ${file.sizeFormatted} | ${file.gzippedSizeFormatted} |\n`;
            });
            report += '\n';
          }

          // CSS files
          if (cssAnalysis.files.length > 0) {
            report += '### CSS Files\n';
            report += '| File | Size | Gzipped |\n';
            report += '|------|------|---------|\n';
            cssAnalysis.files.forEach(file => {
              report += `| ${file.name} | ${file.sizeFormatted} | ${file.gzippedSizeFormatted} |\n`;
            });
            report += '\n';
          }

          // Summary
          const totalSize = jsAnalysis.total + cssAnalysis.total;
          const totalGzipped = jsAnalysis.totalGzipped + cssAnalysis.totalGzipped;

          report += '### Bundle Summary\n';
          report += '| Asset Type | Size | Gzipped |\n';
          report += '|------------|------|---------|\n';
          report += `| JavaScript | ${formatBytes(jsAnalysis.total)} | ${formatBytes(jsAnalysis.totalGzipped)} |\n`;
          report += `| CSS | ${formatBytes(cssAnalysis.total)} | ${formatBytes(cssAnalysis.totalGzipped)} |\n`;
          report += `| **Total** | **${formatBytes(totalSize)}** | **${formatBytes(totalGzipped)}** |\n\n`;

          // Performance recommendations
          report += '### Performance Analysis\n';
          const totalKB = totalSize / 1024;
          const gzippedKB = totalGzipped / 1024;
          
          if (gzippedKB > 250) {
            report += '🔴 **Critical**: Bundle size is very large (>250KB gzipped). Consider aggressive code splitting and lazy loading.\n';
          } else if (gzippedKB > 150) {
            report += '🟡 **Warning**: Bundle size is large (>150KB gzipped). Consider code splitting and optimization.\n';
          } else if (gzippedKB > 100) {
            report += '🟠 **Good**: Bundle size is reasonable but could be optimized further.\n';
          } else {
            report += '🟢 **Excellent**: Bundle size is optimal for fast loading!\n';
          }

          report += `\n**Recommendations:**\n`;
          report += `- Current gzipped size: ${formatBytes(totalGzipped)}\n`;
          report += `- Target for optimal loading: <100KB gzipped\n`;
          if (gzippedKB > 100) {
            report += `- Consider implementing code splitting with React.lazy()\n`;
            report += `- Analyze and reduce large dependencies\n`;
            report += `- Use tree shaking to eliminate unused code\n`;
          }

          fs.writeFileSync('bundle-report.md', report);
          
          console.log('Bundle analysis complete!');
          console.log(`Total bundle size: ${formatBytes(totalSize)}`);
          console.log(`Total gzipped size: ${formatBytes(totalGzipped)}`);
          
          return { totalSize, totalGzipped };
        }

        // Run the analysis
        try {
          generateReport();
        } catch (error) {
          console.error('Bundle analysis failed:', error);
          process.exit(1);
        }
        EOF

        # Run the analysis
        node analyze-bundle.js
      env:
        REACT_APP_USER_POOL_ID: ${{ secrets.REACT_APP_USER_POOL_ID }}
        REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          try {
            const fs = require('fs');
            const report = fs.readFileSync('bundle-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            
            console.log('✅ Successfully posted bundle analysis comment to PR');
          } catch (error) {
            console.log('⚠️ Could not post PR comment (this is normal for Dependabot PRs or restricted permissions):', error.message);
            console.log('📄 Bundle analysis report is still available as an artifact below.');
            console.log('📊 Current bundle analysis shows:');
            
            // Log key metrics to the console as fallback
            const fs = require('fs');
            const report = fs.readFileSync('bundle-report.md', 'utf8');
            const lines = report.split('\n');
            const summaryStart = lines.findIndex(line => line.includes('Bundle Summary'));
            if (summaryStart !== -1) {
              for (let i = summaryStart; i < Math.min(summaryStart + 10, lines.length); i++) {
                if (lines[i].trim()) console.log(lines[i]);
              }
            }
          }

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: bundle-report.md
        retention-days: 30

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: |
        CI=false npm run build
      env:
        REACT_APP_USER_POOL_ID: ${{ secrets.REACT_APP_USER_POOL_ID }}
        REACT_APP_CLIENT_ID: ${{ secrets.REACT_APP_CLIENT_ID }}

    - name: Serve build
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        SERVER_PID=$!
        echo "Server started with PID: $SERVER_PID"
        sleep 15
        
        # Test if server is running and accessible
        echo "Testing server connectivity..."
        curl --retry 10 --retry-delay 2 --retry-connrefused -f http://localhost:3000 || {
          echo "Server failed to start or respond"
          echo "Server logs:"
          ps aux | grep serve
          netstat -tulpn | grep :3000
          exit 1
        }
        echo "Server is running and accessible ✓"

    - name: Run Lighthouse
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true

    - name: Run Lighthouse (fallback)
      if: failure()
      run: |
        npm install -g lighthouse
        lighthouse http://localhost:3000 \
          --output=html \
          --output-path=lighthouse-report.html \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --quiet || echo "Lighthouse analysis failed"

    - name: Upload Lighthouse reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports
        path: |
          lighthouse-report.html
          .lighthouseci/
        retention-days: 30
